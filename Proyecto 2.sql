DROP DATABASE IF EXISTS FIT_WOMEN;
CREATE DATABASE IF NOT EXISTS FIT_WOMEN;
USE FIT_WOMEN;


CREATE TABLE IF NOT EXISTS PRODUCTO (CODIGO VARCHAR (10) PRIMARY KEY, DESCRIPCION VARCHAR (30), TALLE VARCHAR (5), 
PRECIO DECIMAL (10,2));

CREATE TABLE IF NOT EXISTS CLIENTE (DNI INT (12) PRIMARY KEY, NOMBRE VARCHAR (20), APELLIDO VARCHAR (20), DIRECCION VARCHAR (30), 
LOCALIDAD VARCHAR(30), CELULAR INT(15));

ALTER TABLE CLIENTE MODIFY LOCALIDAD VARCHAR (30);

DESCRIBE PRODUCTO;

INSERT INTO PRODUCTO (CODIGO, DESCRIPCION, TALLE, PRECIO) VALUES ('CPO01', 'CALZA BRA', 'S', 20000);
INSERT INTO PRODUCTO VALUES ('CLF01', 'CALZA COL', 'M', 18000);
INSERT INTO PRODUCTO VALUES ('CDD01', 'CALZA MEX', 'S', 20000);
INSERT INTO PRODUCTO VALUES ('CPO02', 'CALZA DOM', 'M', 19000);
INSERT INTO PRODUCTO VALUES ('CLF02', 'CALZA VEN', 'S', 20000);
INSERT INTO PRODUCTO VALUES ('SPO01', 'SHORT FRA', 'S', 14000);
INSERT INTO PRODUCTO VALUES ('SPO02', 'SHORT ESP', 'M', 15000);
INSERT INTO PRODUCTO VALUES ('SLF01', 'SHORT POR', 'S', 14000);
INSERT INTO PRODUCTO VALUES ('MDD01', 'MUSCULOSA IND', 'L', 9000);
INSERT INTO PRODUCTO VALUES ('MLF01', 'MUSCULOSA TAI', 'S', 7500);
INSERT INTO PRODUCTO VALUES ('TPO01', 'TOP EGI', 'S', 5000);
INSERT INTO PRODUCTO VALUES ('TLF01', 'TOP SUD', 'M', 6000);
SELECT * FROM PRODUCTO;

DESCRIBE CLIENTE;
INSERT INTO CLIENTE VALUES (37308651, 'GRISEL', 'BARRETO', 'LUCILO LOPEZ 553', 'CONCEPCION DEL URUGUAY', 3447491071);
INSERT INTO CLIENTE VALUES (38572630, 'MARIELA', 'IGLESIAS', 'HECTOR DE ELIA 2557', 'COLON', 3447435062);
INSERT INTO CLIENTE VALUES (32655230, 'LUCIA', 'PEREZ', 'PANAMA 238', 'CORDOBA', 358604050);
INSERT INTO CLIENTE VALUES (34830796, 'CLARA', 'OCAMPO', 'INGENIERO PEREYRA', 'SANTA FE', 342712508);
INSERT INTO CLIENTE VALUES (33843641, 'ISABEL', 'SUAREZ', 'SANTA FE 831', 'BUENOS AIRES', 11482310);
INSERT INTO CLIENTE VALUES (40665381, 'MILAGROS', 'FENDER', 'AV ENTRE RIOS 841', 'ROSARIO', 342482098);
SELECT * FROM CLIENTE;

ALTER TABLE CLIENTE ADD COLUMN PROVINCIA VARCHAR (20);
UPDATE CLIENTE SET PROVINCIA = 'ER' WHERE NOMBRE = 'GRISEL';
UPDATE CLIENTE SET PROVINCIA = 'ER' WHERE NOMBRE = 'MARIELA';
UPDATE CLIENTE SET PROVINCIA = 'CBA' WHERE APELLIDO = 'PEREZ';
UPDATE CLIENTE SET PROVINCIA = 'SFE' WHERE NOMBRE= 'CLARA';
UPDATE CLIENTE SET PROVINCIA = 'BAS' WHERE APELLIDO= 'SUAREZ';
UPDATE CLIENTE SET PROVINCIA = 'SFE' WHERE NOMBRE= 'MILAGROS';

CREATE TABLE IF NOT EXISTS PEDIDO (NUMERO INT (10) UNSIGNED AUTO_INCREMENT PRIMARY KEY, CODIGO_PRODUCTO VARCHAR (10), DNI_CLIENTE INT (12), 
CANTIDAD INT (10), FECHA DATE, CODIGO_PAGO INT(10), CUIT_ENVIO VARCHAR(15),
FOREIGN KEY (CODIGO_PRODUCTO) REFERENCES PRODUCTO (CODIGO),
FOREIGN KEY (DNI_CLIENTE) REFERENCES CLIENTE (DNI),
FOREIGN KEY (CODIGO_PAGO) REFERENCES PAGO (CODIGO),
FOREIGN KEY (CUIT_ENVIO) REFERENCES ENVIO (CUIT));

SELECT * FROM PEDIDO;
INSERT INTO PEDIDO VALUES (NULL, 'CLF01', 37308651, 2, '2023-12-10', 1, '30-70857483-6');
INSERT INTO PEDIDO VALUES (NULL, 'SPO02', 32655230, 5, '2023-12-4', 2, '30-70857483-6');
INSERT INTO PEDIDO VALUES (NULL,'TPO01' , 33843641, 10, '2023-12-6', 3, '30-69801114-5');
INSERT INTO PEDIDO VALUES (NULL,'CPO02' , 40665381, 3, '2023-12-12', 3, '30-70857483-6');
INSERT INTO PEDIDO VALUES (NULL,'MDD01', 38572630, 6, '2023-12-18', 3, '30-70857483-6');

CREATE TABLE IF NOT EXISTS PROVEEDOR (CUIT VARCHAR(15) PRIMARY KEY, RAZON_SOCIAL VARCHAR (30), DIRECCION VARCHAR (40), 
CODIGO_POSTAL INT (6));
DESCRIBE PROVEEDOR;
SELECT * FROM PROVEEDOR;

INSERT INTO PROVEEDOR VALUES ('27-37308561-3', 'LADY FIT', 'JUAN PERON 838', 3260);
INSERT INTO PROVEEDOR VALUES ('26-38572630-5', 'PRO ONE', '9 DE JULIO 720', 4580);
INSERT INTO PROVEEDOR VALUES ('30-70184374-2', 'DESTREZA', 'SAN MARTIN 950', 1542);

CREATE TABLE IF NOT EXISTS ENVIO (CUIT VARCHAR(15) PRIMARY KEY, RAZON_SOCIAL VARCHAR (30), TIEMPO_ENTREGA INT(6), COSTO DECIMAL (10,2));
SELECT * FROM ENVIO;
INSERT INTO ENVIO VALUES ('30-70857483-6', 'CORREO ARGENTINO', 5, 2000);
INSERT INTO ENVIO VALUES ('30-69801114-5', 'ANDREANI', 7, 1500);

CREATE TABLE IF NOT EXISTS PAGO (CODIGO INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY, DESCRIPCION VARCHAR (30), COSTO_FINANCIACION DECIMAL (10,2));
SELECT * FROM PAGO;
INSERT INTO PAGO VALUES (NULL, 'CONTADO', 0);
INSERT INTO PAGO VALUES (NULL, '3 CUOTAS', 0.2);
INSERT INTO PAGO VALUES (NULL, '6 CUOTAS', 0.4);


CREATE TABLE IF NOT EXISTS COMPRA (NUMERO INT(10) UNSIGNED AUTO_INCREMENT PRIMARY KEY, CODIGO_PRODUCTO VARCHAR(10), CUIT_PROVEEDOR VARCHAR(15), 
CANTIDAD INT (10), PRECIO DECIMAL(10,2),
FOREIGN KEY (CODIGO_PRODUCTO) REFERENCES PRODUCTO (CODIGO),
FOREIGN KEY (CUIT_PROVEEDOR) REFERENCES PROVEEDOR (CUIT));

INSERT INTO COMPRA VALUES (NULL, 'SPO01','26-38572630-5', 20, 10000);
INSERT INTO COMPRA VALUES (NULL, 'MDD01','30-70184374-2', 20, 5000);
INSERT INTO COMPRA VALUES (NULL, 'TPO01','26-38572630-5', 20, 15000);

SELECT * FROM PRODUCTO;
SELECT * FROM CLIENTE;
SELECT * FROM PEDIDO;
SELECT * FROM PROVEEDOR;
SELECT * FROM COMPRA;
SELECT * FROM ENVIO;
SELECT * FROM PAGO;

#Mostrar un detalle del pedido con el numero, el nombre del producto y el importe total:
SELECT PE.NUMERO, PRO.DESCRIPCION, PE.CANTIDAD* PRO.PRECIO AS IMPORTE_TOTAL
FROM PEDIDO AS PE, PRODUCTO AS PRO
WHERE PE.CODIGO_PRODUCTO = PRO.CODIGO
ORDER BY IMPORTE_TOTAL DESC;

#Mostrar la cantidad de pedidos cuyo pago sera en 3 cuotas:
SELECT COUNT(NUMERO) AS CANTIDAD_PEDIDOS, PA.DESCRIPCION
FROM PEDIDO AS PE
JOIN PAGO AS PA ON PE.CODIGO_PAGO = PA.CODIGO
WHERE PA.DESCRIPCION LIKE '%3%'

#Mostrar la cantidad de clientes por provincia y ordenarlos en forma descendente:
SELECT PROVINCIA, COUNT(PROVINCIA) AS CANTIDAD
FROM CLIENTE
GROUP BY PROVINCIA
ORDER BY COUNT(PROVINCIA) DESC

#Mostrar cuales de mis clientes ya me pagó y quienes adeudan:
SELECT CONCAT(CLI.NOMBRE, ' ', CLI.APELLIDO) AS NOMBRE_COMPLETO,
IF(PE.CODIGO_PAGO <> 1, 'NO PAGO', 'PAGO') AS SITUACION_DE_PAGO
FROM CLIENTE AS CLI
JOIN PEDIDO AS PE
ON CLI.DNI= PE.DNI_CLIENTE
ORDER BY NOMBRE_COMPLETO 

#Mostrar qué productos aún no se vendieron:
SELECT PRO.CODIGO, PRO.DESCRIPCION 
FROM PRODUCTO PRO
WHERE NOT EXISTS (SELECT CODIGO_PRODUCTO FROM PEDIDO WHERE PRO.CODIGO = CODIGO_PRODUCTO)

#Mostrar la cantidad de envíos que tengo por logística:
SELECT COUNT(*) AS CANTIDAD_ENVIOS, ENV.RAZON_SOCIAL AS LOGISTICA
FROM PEDIDO AS PE
JOIN ENVIO AS ENV
ON PE.CUIT_ENVIO = ENV.CUIT
GROUP BY LOGISTICA

#Mostrar el precio promedio de los productos por pedido:
SELECT ROUND(AVG(PRO.PRECIO),2) AS PRECIO_PROMEDIO
FROM PRODUCTO PRO, PEDIDO PE
WHERE PRO.CODIGO = PE.CODIGO_PRODUCTO

#Mostrar los 3 primeros productos más vendidos:
SELECT PE.CODIGO_PRODUCTO, PRO.DESCRIPCION, PE.CANTIDAD FROM PRODUCTO AS PRO
INNER JOIN PEDIDO AS PE
ON PRO.CODIGO = PE.CODIGO_PRODUCTO
ORDER BY PE.CANTIDAD DESC
LIMIT 3

#Mostrar el segundo producto más vendido:
SELECT PE.CODIGO_PRODUCTO, PRO.DESCRIPCION, PE.CANTIDAD FROM PRODUCTO AS PRO
INNER JOIN PEDIDO AS PE
ON PRO.CODIGO = PE.CODIGO_PRODUCTO
ORDER BY PE.CANTIDAD DESC
LIMIT 1,1






